#!/usr/bin/env ruby

# Riemann agent to collect AWS DynamoDB

require 'fog'
require 'riemann/tools'
require 'json'

class Riemann::Tools::AwsDynamoDB
  include Riemann::Tools

  opt :access_key, "AWS access key", :type => String
  opt :secret_key, "Secret access key", :type => String
  opt :region, "AWS region", :type => String, :default => 'us-east-1'
  opt :tables, "Table names", :type => String, :multi => true
  # opt :metric, "Metric names with comma-separated warning/critical thresholds (eg., 'CPUUtilization,50,90'). Multiple tuples can be set.", :type => String, :multi => true

  def initialize
    abort "FATAL: specify table names, see --help for usage" unless opts[:tables_given]
    @tables = opts.fetch(:tables)
    if opts.has_key?('access_key') and opts.has_key?('secret_key')
      creds = { :aws_access_key_id     => opts[:access_key],
                :aws_secret_access_key => opts[:secret_key] }
    else
      creds = { :use_iam_profile => true }
    end
    creds['region'] = opts[:region]
    @cloudwatch = Fog::AWS::CloudWatch.new(creds)
  end

  def metrics_opts
    {
      "ProvisionedReadCapacityUnits"  => { statistics: 'Sum', period: 300 },
      "ProvisionedWriteCapacityUnits" => { statistics: 'Sum', period: 300 },
      "ConsumedReadCapacityUnits"     => { statistics: 'Sum', period: 60 },
      "ConsumedWriteCapacityUnits"    => { statistics: 'Sum', period: 60 }
    }
  end

  def tick
    time = Time.new
    @tables.each do |table_name|
      metrics_opts.each_pair do |metric_name, opts|
        result = @cloudwatch.get_metric_statistics({
          "Namespace" => 'AWS/DynamoDB',
          "MetricName" => metric_name,
          "Statistics" => opts[:statistics],
          "Dimensions" => [{"Name" => "TableName", "Value" => table_name}],
          "StartTime" => (Time.now.utc - opts[:period]).iso8601,
          "EndTime" => Time.now.utc.iso8601,
          "Period" => opts[:period]
        })
        metric = (result[:body]["GetMetricStatisticsResult"]["Datapoints"][0] || {}).fetch(opts[:statistics], 0.0)

        msg = {
          metric: metric,
          service: "dynamodb #{table_name} #{metric_name} #{opts[:statistics]}",
          ttl: 120
        }

        report msg
      end
    end
  end
end

Riemann::Tools::AwsDynamoDB.run
